(ns emu6502.core-interface-test
  (:use clojure.test
        emu6502.core
        emu6502.memory-map))

(def invalid-opcodes
  [0x02 0x03 0x04 0x07 0x0B 0x0C 0x0F
   0x12 0x13 0x14 0x17 0x1A 0x1B 0x1C 0x1F
   0x22 0x23 0x27 0x2B 0x2F
   0x32 0x33 0x34 0x37 0x3A 0x3B 0x3C 0x3F
   0x42 0x43 0x44 0x47 0x4B 0x4F
   0x52 0x53 0x54 0x57 0x5A 0x5B 0x5C 0x5F
   0x62 0x63 0x64 0x67 0x6B 0x6F
   0x72 0x73 0x74 0x77 0x7A 0x7B 0x7C 0x7F
   0x80 0x82 0x83 0x87 0x89 0x8B 0x8F
   0x92 0x93 0x97 0x9B 0x9C 0x9E 0x9F
   0xA3 0xA7 0xAB 0xAF
   0xB2 0xB3 0xB7 0xBB 0xBF
   0xC2 0xC3 0xC7 0xCB 0xCF
   0xD2 0xD3 0xD4 0xD7 0xDA 0xDB 0xDC 0xDF
   0xE2 0xE3 0xE7 0xEB 0xEF
   0xF2 0xF3 0xF4 0xF7 0xFA 0xFB 0xFC 0xFF])

(deftest misc-opcodes-test
  (testing "Invalid opcodes produce RuntimeException"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :02))
          cpu-state (new-cpu-state mem-map)]
      (doseq [opcode invalid-opcodes]
        (write-byte mem-map 0x400 opcode)
        (set-reg cpu-state :PC 0x400)
        (is (thrown? RuntimeException (run-single cpu-state))))))
  (testing "NOP instruction is accepted"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :EA))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (= 0x401 (get-reg cpu-state :PC))))))
