(ns emu6502.core-sbc-test
  (:use clojure.test
        emu6502.core
        emu6502.memory-map))

(deftest sbc-bin-instruction-test
  (testing "SBC immidiate works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :E9 :7F))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC immidiate works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :E9 :80))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC zeropage works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :7F)
                    (data-area 0x400 :E5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC zeropage works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :80)
                    (data-area 0x400 :E5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC zeropage,X works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :00 :7F)
                    (data-area 0x400 :F5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC zeropage,X works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :00 :80)
                    (data-area 0x400 :F5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC absolute works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :7F)
                    (data-area 0x400 :ED :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC absolute works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :80)
                    (data-area 0x400 :ED :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC absolute,X works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :7F)
                    (data-area 0x400 :FD :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC absolute,X works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :80)
                    (data-area 0x400 :FD :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC absolute,Y works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :7F)
                    (data-area 0x400 :F9 :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC absolute,Y works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :80)
                    (data-area 0x400 :F9 :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage,X) works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :00 :07 :08)
                    (data-area 0x400 :E1 :20)
                    (data-area 0x807 :7F))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage,X) works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :00 :07 :08)
                    (data-area 0x400 :E1 :20)
                    (data-area 0x807 :80))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage),Y works and sets Z,C and V flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :07 :08)
                    (data-area 0x400 :F1 :20)
                    (data-area 0x807 :00 :7F))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x80)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x67 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage),Y works, sets N flag and clears C flag"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :07 :08)
                    (data-area 0x400 :F1 :20)
                    (data-area 0x807 :00 :80))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x00)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x23)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xA0 (get-reg cpu-state :P)))))))

(deftest sbc-bcd-instruction-test
  (testing "SBC immidiate works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :E9 :49))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC immidiate works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x400 :E9 :10))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x88 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC zeropage works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :49)
                    (data-area 0x400 :E5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC zeropage works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :10)
                    (data-area 0x400 :E5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x88 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC zeropage,X works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :00 :49)
                    (data-area 0x400 :F5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC zeropage,X works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20 :00 :10)
                    (data-area 0x400 :F5 :20))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x88 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC absolute works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :49)
                    (data-area 0x400 :ED :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC absolute works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :10)
                    (data-area 0x400 :ED :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC absolute,X works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :49)
                    (data-area 0x400 :FD :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC absolute,X works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :10)
                    (data-area 0x400 :FD :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC absolute,Y works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :49)
                    (data-area 0x400 :F9 :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC absolute,Y works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x205 :00 :10)
                    (data-area 0x400 :F9 :05 :02))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage,X) works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :00 :07 :08)
                    (data-area 0x400 :E1 :20)
                    (data-area 0x807 :49))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC (zeropage,X) works in BCD mode and sets C,V,N flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :00 :07 :08)
                    (data-area 0x400 :E1 :20)
                    (data-area 0x807 :10))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :X  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P))))))
  (testing "SBC (zeropage),Y works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :07 :08)
                    (data-area 0x400 :F1 :20)
                    (data-area 0x807 :00 :49))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x50)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x00 (get-reg cpu-state :A))
               (= 0x2B (get-reg cpu-state :P))))))
  (testing "SBC (zeropage),Y works in BCD mode and sets Z,C flags"
    (let [mem-map (-> (empty-memory-map)
                    (data-area 0x20  :07 :08)
                    (data-area 0x400 :F1 :20)
                    (data-area 0x807 :00 :10))
          cpu-state (new-cpu-state mem-map)]
      (set-reg cpu-state :A  0x99)
      (set-reg cpu-state :Y  0x01)
      (set-reg cpu-state :P  0x28)
      (set-reg cpu-state :PC 0x400)
      (run-single cpu-state)
      (is (and (= 0x80 (get-reg cpu-state :A))
               (= 0xE9 (get-reg cpu-state :P)))))))

